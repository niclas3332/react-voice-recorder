{"version":3,"sources":["../../src/components/Recorder.js","App.js","index.js"],"names":["constructor","time","miliseconds","recording","medianotFound","audios","audioBlob","stream","handleAudioPause","e","clearInterval","this","pauseRecord","handleAudioStart","startTimer","setInterval","countDown","prevState","state","milisecondsToTime","secs","milisecs","divisor_for_minutes","divisor_for_seconds","h","Math","m","s","ms","initRecorder","navigator","audio","MediaRecorder","mimeType","mimeTypeToUseWhenRecording","console","startRecording","stopRecording","tracks","track","handleReset","saveAudio","blob","Blob","type","audioURL","window","url","chunks","duration","render","React","style","color","marginTop","fontSize","className","styles","title","onClick","setTimeout","icon","faSave","faTrashCan","faMicrophone","Recorder","hideHeader","handleCountDown","data","App","props","audioDetails","log","setState","file","record","disableFullUI","handleAudioStop","handleAudioUpload","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ef9adf78.chunk.js","sourcesContent":["import React, { Component, useEffect } from \"react\";\nimport microphone from \"./../imgs/microphone.svg\";\nimport stopIcon from \"./../imgs/stop.png\";\nimport pauseIcons from \"./../imgs/pause.png\";\nimport playIcons from \"./../imgs/play-button.png\";\nimport closeIcons from \"./../imgs/close.png\";\nimport styles from \"../styles.module.css\";\n\nconst audioType = \"audio/*\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMicrophone, faTimes, faSave, faTrashCan } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Recorder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: {},\n      miliseconds: 0,\n      recording: false,\n      medianotFound: false,\n      audios: [],\n      audioBlob: null,\n      stream: null\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  handleAudioPause(e) {\n    e.preventDefault();\n    clearInterval(this.timer);\n    this.mediaRecorder.pause();\n    this.setState({ pauseRecord: true });\n  }\n\n  handleAudioStart(e) {\n    e.preventDefault();\n    this.startTimer();\n    this.mediaRecorder.resume();\n    this.setState({ pauseRecord: false });\n  }\n\n  startTimer() {\n    // if (this.timer === 0 && this.state.seconds > 0) {\n    this.timer = setInterval(this.countDown, 100);\n    // }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n\n    this.setState(prevState => {\n      const miliseconds = prevState.miliseconds + 100;\n      return ({ time: this.milisecondsToTime(miliseconds), miliseconds: miliseconds });\n    });\n\n    this.props.handleCountDown(this.state.time);\n  }\n\n  milisecondsToTime(milisecs) {\n\n    let secs = milisecs / 1000;\n    let hours = Math.floor(secs / (60 * 60));\n\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n\n    let obj = {\n      h: hours,\n      m: minutes,\n      s: seconds,\n      ms: milisecs\n    };\n    return obj;\n  }\n\n  async initRecorder() {\n    navigator.getUserMedia =\n      navigator.getUserMedia ||\n      navigator.webkitGetUserMedia ||\n      navigator.mozGetUserMedia ||\n      navigator.msGetUserMedia;\n    if (navigator.mediaDevices) {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      if (this.props.mimeTypeToUseWhenRecording) {\n        this.mediaRecorder = new MediaRecorder(stream, { mimeType: this.props.mimeTypeToUseWhenRecording });\n      } else {\n        this.mediaRecorder = new MediaRecorder(stream);\n      }\n      this.chunks = [];\n      this.mediaRecorder.ondataavailable = e => {\n        if (e.data && e.data.size > 0) {\n          this.chunks.push(e.data);\n        }\n      };\n\n      this.stream = stream;\n    } else {\n      this.setState({ medianotFound: true });\n      console.log(\"Media Decives will work only with SSL.....\");\n    }\n  }\n\n  async startRecording(e) {\n    e.preventDefault();\n    // wipe old data chunks\n    this.chunks = [];\n\n    await this.initRecorder();\n    // start recorder with 10ms buffer\n    this.mediaRecorder.start(10);\n    this.startTimer();\n    // say that we're recording\n    this.setState({ recording: true });\n  }\n\n\n  async stopRecording(e) {\n    clearInterval(this.timer);\n    this.setState({ time: {} });\n    e.preventDefault();\n    // stop the recorder\n\n    if (this.stream.getAudioTracks) {\n      const tracks = this.stream.getAudioTracks();\n      tracks.forEach((track) => {\n        track.stop();\n      });\n    } else {\n      console.log(\"No Tracks Found\");\n    }\n\n    this.mediaRecorder.stop();\n\n    // say that we're not recording\n    this.setState({ recording: false, pauseRecord: false });\n    // save the video to memory\n    this.saveAudio();\n  }\n\n  handleReset(e) {\n    if (this.state.recording) {\n      this.stopRecording(e);\n    }\n    this.setState({\n      time: {},\n      miliseconds: 0,\n      recording: false,\n      medianotFound: false,\n      audios: [],\n      audioBlob: null\n    }, () => {\n\n      this.props.handleReset(this.state);\n    });\n\n  }\n\n  saveAudio() {\n    // convert saved chunks to blob\n    const blob = new Blob(this.chunks, { type: audioType });\n    // generate video url from blob\n    const audioURL = window.URL.createObjectURL(blob);\n    // append videoURL to list of saved videos for rendering\n    const audios = [audioURL];\n    this.setState({ audios, audioBlob: blob });\n    this.props.handleAudioStop({\n      url: audioURL,\n      blob: blob,\n      chunks: this.chunks,\n      duration: this.state.time\n    });\n    console.log(\"Save Audio\");\n  }\n\n  render() {\n    const { recording, audios, time, medianotFound, pauseRecord } = this.state;\n    const { showUIAudio, title, audioURL, disableFullUI } = this.props;\n\n\n    return (\n      <div>\n        <div>\n          <div>\n\n            {\n              !medianotFound ?\n                (\n                  <div className={styles.record_section}>\n\n\n                    {\n                      !recording ?\n                        (\n                          <button className=\"cancel-button\" title=\"Cancel recording\"\n                                  onClick={e => this.startRecording(e)}>\n                            <FontAwesomeIcon icon={faMicrophone} />\n                          </button>\n\n\n                        ) :\n                        (\n                          <div>\n                          <button className=\"cancel-button\" title=\"Upload recording\"  onClick={async e => {\n                            await this.stopRecording(e);\n\n                            setTimeout(() => {\n                              this.props.handleAudioUpload(this.state.audioBlob)\n\n                            }, 100)\n\n\n                          }}>\n                            <FontAwesomeIcon icon={ faSave }/>\n                          </button>\n                          <button className=\"cancel-button\" title=\"Cancel recording\" onClick={e => this.handleReset(e)}>\n                            <FontAwesomeIcon icon={ faTrashCan }/>\n                          </button>\n                          </div>\n                        )\n                    }\n                  </div>\n                ) :\n                (\n                  <p style={{ color: \"#fff\", marginTop: 30, fontSize: 25 }}>\n                    Seems the site is Non-SSL\n                  </p>\n                )\n\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Recorder;\n\nRecorder.defaultProps = {\n  hideHeader: false,\n  mimeTypeToUseWhenRecording: null,\n  handleCountDown: (data) => {\n  }\n};\n","import React from 'react'\n\nimport { Recorder } from 'react-voice-recorder'\nimport 'react-voice-recorder/dist/index.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      audioDetails: {\n        url: null,\n        blob: null,\n        chunks: null,\n        duration: {\n          h: 0,\n          m: 0,\n          s: 0\n        }\n      }\n    }\n  }\n\n  handleAudioStop(data) {\n    console.log(data)\n    this.setState({ audioDetails: data });\n  }\n  handleAudioUpload(file) {\n    console.log(file);\n  }\n  handleReset() {\n    const reset = {\n      url: null,\n      blob: null,\n      chunks: null,\n      duration: {\n        h: 0,\n        m: 0,\n        s: 0\n      }\n    };\n    this.setState({ audioDetails: reset });\n  }\n\n  render() {\n    return (\n      <Recorder\n        record={true}\n        title={\"New recording\"}\n        audioURL={this.state.audioDetails.url}\n        disableFullUI={true}\n        handleAudioStop={data => this.handleAudioStop(data)}\n        handleAudioUpload={data => this.handleAudioUpload(data)}\n        handleReset={() => this.handleReset()}\n\n      />\n    )\n  }\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}